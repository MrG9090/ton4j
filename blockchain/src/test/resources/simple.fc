#pragma version >=0.4.3;

#include "stdlib.fc";

() recv_internal(int my_ton_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure inline {
    ~dump(40);
    ~dump(my_ton_balance);

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    slice sender_address = cs~load_msg_addr();
    var x = in_msg_body~load_uint(32);
    ~dump(x);
    set_data(begin_cell().store_uint(x, 32).end_cell());
}

() recv_external(slice in_msg_body) impure inline {
    ~dump(41);

    var msg_seqno = in_msg_body~load_uint(32);
    var ds = get_data().begin_parse();
    var stored_seqno = ds~load_uint(32);
    var stored_unique = ds~load_uint(32);

    throw_if(33, msg_seqno != stored_seqno);

    accept_message();

    set_data(begin_cell().store_uint(stored_seqno + 1, 32).store_uint(stored_unique, 32).end_cell());
}

int seqno() method_id {
    ~dump(42);
    return get_data().begin_parse().preload_uint(32);
}

int unique() method_id {
    ~dump(42);
    return get_data().begin_parse().skip_bits(32).preload_uint(32);
}