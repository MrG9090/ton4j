package org.ton.java.smartcontract.unittests;
import com.iwebpp.crypto.TweetNaclFast;
import lombok.extern.slf4j.Slf4j;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import org.ton.java.address.Address;
import org.ton.java.cell.Cell;
import org.ton.java.cell.CellBuilder;
import org.ton.java.cell.TonHashMapE;
import org.ton.java.smartcontract.types.WalletV5Config;
import org.ton.java.smartcontract.utils.MsgUtils;
import org.ton.java.smartcontract.wallet.v5.WalletV5;
import org.ton.java.tlb.types.CurrencyCollection;
import org.ton.java.tlb.types.InternalMessageInfo;
import org.ton.java.tlb.types.Message;
import org.ton.java.tlb.types.MsgAddressIntStd;
import org.ton.java.tonlib.Tonlib;
import org.ton.java.utils.Utils;

import static org.junit.Assert.assertEquals;

@Slf4j
@RunWith(JUnit4.class)
public class TestWalletV5 {

    private static final String SECRET_KEY = "F182111193F30D79D517F2339A1BA7C25FDF6C52142F0F2C1D960A1F1D65E1E4";

    @Test
    public void testNewWalletV5() {
        byte[] secretKey = Utils.hexToSignedBytes(SECRET_KEY);
        TweetNaclFast.Signature.KeyPair keyPair = TweetNaclFast.Signature.keyPair_fromSeed(secretKey);

        WalletV5 contract = WalletV5.builder()
                .tonlib(Tonlib.builder().build())
                .wc(0)
                .walletId(43)
                .keyPair(keyPair)
                .extensions(new TonHashMapE(0))
                .build();

        String codeAsHex = contract.getStateInit().getCode().bitStringToHex();
        String dataAsHex = contract.getStateInit().getData().bitStringToHex();
        String rawAddress = contract.getAddress().toRaw();

        assertEquals("FF00F4A413F4BCF2C80B", codeAsHex);
        assertEquals("0000000000000015C150592A1E837F605564A974F639C5F2B558DB013FE060D540BD70A5A68F697DA_", dataAsHex);
        assertEquals("0:b259c80bc59f10f0a4dbe703c6311b2d259e12ed074f3ce9d7c285b20c7a50ef", rawAddress);

        Message msg = contract.prepareDeployMsg();
        log.info(msg.toString());

        // external message for serialization
        String expected = "880164B390178B3E21E149B7CE078C62365A4B3C25DA0E9E79D3AF850B6418F4A1DE119EBC3839D83BF100A86461668909F7D4D6D3C41669CDA49D0ED44A6999DD7F3972D352B99C39E3B58CF61FDCA0A142D9A335CFD99CC969DE85997BF45EAC6761000000057FFFFFFFE00000001_";
        String actual = msg.toCell().bitStringToHex();
        assertEquals(expected, actual);

        // external message in BoC format
        expected
        actual = Utils.bytesToHex(msg.toCell().toBoc(true)).toUpperCase();
        assertEquals(expected, actual);
    }
}
